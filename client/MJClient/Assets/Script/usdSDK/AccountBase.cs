/*
	Generated by KBEngine!
	Please do not modify this file!
	Please inherit this module, such as: (class Account : AccountBase)
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;

	// defined in */scripts/entity_defs/Account.def
	// Please inherit and implement "class Account : AccountBase"
	public abstract class AccountBase : Entity
	{
		public EntityBaseEntityCall_AccountBase baseEntityCall = null;
		public EntityCellEntityCall_AccountBase cellEntityCall = null;

		public TING_PAI_LIST TingPaiList = new TING_PAI_LIST();
		public virtual void onTingPaiListChanged(TING_PAI_LIST oldValue) {}
		public Int32 _lastmailID = 0;
		public virtual void on_lastmailIDChanged(Int32 oldValue) {}
		public PLAYER_ACTION_DIC actionData = new PLAYER_ACTION_DIC();
		public virtual void onActionDataChanged(PLAYER_ACTION_DIC oldValue) {}
		public FRIENDS_LIST friendsList = new FRIENDS_LIST();
		public virtual void onFriendsListChanged(FRIENDS_LIST oldValue) {}
		public MJ_LIST holds = new MJ_LIST();
		public virtual void onHoldsChanged(MJ_LIST oldValue) {}
		public Byte inRoom = 0;
		public virtual void onInRoomChanged(Byte oldValue) {}
		public Byte isNewPlayer = 1;
		public virtual void onIsNewPlayerChanged(Byte oldValue) {}
		public Byte isReady = 0;
		public virtual void onIsReadyChanged(Byte oldValue) {}
		public MAIL_LIST mailList = new MAIL_LIST();
		public virtual void onMailListChanged(MAIL_LIST oldValue) {}
		public UInt32 playerGold = 1000;
		public virtual void onPlayerGoldChanged(UInt32 oldValue) {}
		public UInt16 playerID = 0;
		public virtual void onPlayerIDChanged(UInt16 oldValue) {}
		public UInt16 playerID_base = 0;
		public virtual void onPlayerID_baseChanged(UInt16 oldValue) {}
		public string playerName = "";
		public virtual void onPlayerNameChanged(string oldValue) {}
		public string playerName_base = "";
		public virtual void onPlayerName_baseChanged(string oldValue) {}
		public Byte roomSeatIndex = 0;
		public virtual void onRoomSeatIndexChanged(Byte oldValue) {}

		public abstract void OnReqCreateAvatar(Byte arg1); 
		public abstract void addMail(MAIL arg1); 
		public abstract void callClientMsg(string arg1); 
		public abstract void deleMail(Int32 arg1); 
		public abstract void game_begin_push(); 
		public abstract void game_chupai_push(); 
		public abstract void game_mopai_push(SByte arg1); 
		public abstract void hasTing(TING_PAI_LIST arg1); 
		public abstract void has_action(); 
		public abstract void initFriendsListOK(PLAYRE_DATA_LIST arg1); 
		public abstract void onGameOver(); 
		public abstract void onGang(UInt32 arg1, SByte arg2, string arg3); 
		public abstract void onGetRoomInfo(ROOM_PUBLIC_INFO arg1); 
		public abstract void onHu(UInt32 arg1, Byte arg2, SByte arg3); 
		public abstract void onPlayCard(UInt32 arg1, SByte arg2); 
		public abstract void onPlayCardOver(UInt32 arg1, SByte arg2); 
		public abstract void otherPlayerMopai(UInt32 arg1); 
		public abstract void peng_notify_push(UInt32 arg1, SByte arg2); 
		public abstract void playerLevelRoom(); 
		public abstract void upDataClientRoomInfo(ROOM_PUBLIC_INFO arg1); 

		public AccountBase()
		{
		}

		public override void onGetBase()
		{
			baseEntityCall = new EntityBaseEntityCall_AccountBase(id, className);
		}

		public override void onGetCell()
		{
			cellEntityCall = new EntityCellEntityCall_AccountBase(id, className);
		}

		public override void onLoseCell()
		{
			cellEntityCall = null;
		}

		public override EntityCall getBaseEntityCall()
		{
			return baseEntityCall;
		}

		public override EntityCall getCellEntityCall()
		{
			return cellEntityCall;
		}

		public override void attachComponents()
		{
		}

		public override void detachComponents()
		{
		}

		public override void onRemoteMethodCall(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];

			UInt16 methodUtype = 0;
			UInt16 componentPropertyUType = 0;

			if(sm.usePropertyDescrAlias)
			{
				componentPropertyUType = stream.readUint8();
			}
			else
			{
				componentPropertyUType = stream.readUint16();
			}

			if(sm.useMethodDescrAlias)
			{
				methodUtype = stream.readUint8();
			}
			else
			{
				methodUtype = stream.readUint16();
			}

			Method method = null;

			if(componentPropertyUType == 0)
			{
				method = sm.idmethods[methodUtype];
			}
			else
			{
				Property pComponentPropertyDescription = sm.idpropertys[componentPropertyUType];
				switch(pComponentPropertyDescription.properUtype)
				{
					default:
						break;
				}

				return;
			}

			switch(method.methodUtype)
			{
				case 23:
					Byte OnReqCreateAvatar_arg1 = stream.readUint8();
					OnReqCreateAvatar(OnReqCreateAvatar_arg1);
					break;
				case 48:
					MAIL addMail_arg1 = ((DATATYPE_MAIL)method.args[0]).createFromStreamEx(stream);
					addMail(addMail_arg1);
					break;
				case 40:
					string callClientMsg_arg1 = stream.readUnicode();
					callClientMsg(callClientMsg_arg1);
					break;
				case 49:
					Int32 deleMail_arg1 = stream.readInt32();
					deleMail(deleMail_arg1);
					break;
				case 26:
					game_begin_push();
					break;
				case 29:
					game_chupai_push();
					break;
				case 31:
					SByte game_mopai_push_arg1 = stream.readInt8();
					game_mopai_push(game_mopai_push_arg1);
					break;
				case 37:
					TING_PAI_LIST hasTing_arg1 = ((DATATYPE_TING_PAI_LIST)method.args[0]).createFromStreamEx(stream);
					hasTing(hasTing_arg1);
					break;
				case 28:
					has_action();
					break;
				case 39:
					PLAYRE_DATA_LIST initFriendsListOK_arg1 = ((DATATYPE_PLAYRE_DATA_LIST)method.args[0]).createFromStreamEx(stream);
					initFriendsListOK(initFriendsListOK_arg1);
					break;
				case 38:
					onGameOver();
					break;
				case 34:
					UInt32 onGang_arg1 = stream.readUint32();
					SByte onGang_arg2 = stream.readInt8();
					string onGang_arg3 = stream.readUnicode();
					onGang(onGang_arg1, onGang_arg2, onGang_arg3);
					break;
				case 25:
					ROOM_PUBLIC_INFO onGetRoomInfo_arg1 = ((DATATYPE_ROOM_PUBLIC_INFO)method.args[0]).createFromStreamEx(stream);
					onGetRoomInfo(onGetRoomInfo_arg1);
					break;
				case 35:
					UInt32 onHu_arg1 = stream.readUint32();
					Byte onHu_arg2 = stream.readUint8();
					SByte onHu_arg3 = stream.readInt8();
					onHu(onHu_arg1, onHu_arg2, onHu_arg3);
					break;
				case 30:
					UInt32 onPlayCard_arg1 = stream.readUint32();
					SByte onPlayCard_arg2 = stream.readInt8();
					onPlayCard(onPlayCard_arg1, onPlayCard_arg2);
					break;
				case 36:
					UInt32 onPlayCardOver_arg1 = stream.readUint32();
					SByte onPlayCardOver_arg2 = stream.readInt8();
					onPlayCardOver(onPlayCardOver_arg1, onPlayCardOver_arg2);
					break;
				case 32:
					UInt32 otherPlayerMopai_arg1 = stream.readUint32();
					otherPlayerMopai(otherPlayerMopai_arg1);
					break;
				case 33:
					UInt32 peng_notify_push_arg1 = stream.readUint32();
					SByte peng_notify_push_arg2 = stream.readInt8();
					peng_notify_push(peng_notify_push_arg1, peng_notify_push_arg2);
					break;
				case 24:
					playerLevelRoom();
					break;
				case 27:
					ROOM_PUBLIC_INFO upDataClientRoomInfo_arg1 = ((DATATYPE_ROOM_PUBLIC_INFO)method.args[0]).createFromStreamEx(stream);
					upDataClientRoomInfo(upDataClientRoomInfo_arg1);
					break;
				default:
					break;
			};
		}

		public override void onUpdatePropertys(MemoryStream stream)
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			while(stream.length() > 0)
			{
				UInt16 _t_utype = 0;
				UInt16 _t_child_utype = 0;

				{
					if(sm.usePropertyDescrAlias)
					{
						_t_utype = stream.readUint8();
						_t_child_utype = stream.readUint8();
					}
					else
					{
						_t_utype = stream.readUint16();
						_t_child_utype = stream.readUint16();
					}
				}

				Property prop = null;

				if(_t_utype == 0)
				{
					prop = pdatas[_t_child_utype];
				}
				else
				{
					Property pComponentPropertyDescription = pdatas[_t_utype];
					switch(pComponentPropertyDescription.properUtype)
					{
						default:
							break;
					}

					return;
				}

				switch(prop.properUtype)
				{
					case 13:
						TING_PAI_LIST oldval_TingPaiList = TingPaiList;
						TingPaiList = ((DATATYPE_TING_PAI_LIST)EntityDef.id2datatypes[34]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onTingPaiListChanged(oldval_TingPaiList);
						}
						else
						{
							if(inWorld)
								onTingPaiListChanged(oldval_TingPaiList);
						}

						break;
					case 15:
						Int32 oldval__lastmailID = _lastmailID;
						_lastmailID = stream.readInt32();

						if(prop.isBase())
						{
							if(inited)
								on_lastmailIDChanged(oldval__lastmailID);
						}
						else
						{
							if(inWorld)
								on_lastmailIDChanged(oldval__lastmailID);
						}

						break;
					case 12:
						PLAYER_ACTION_DIC oldval_actionData = actionData;
						actionData = ((DATATYPE_PLAYER_ACTION_DIC)EntityDef.id2datatypes[32]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onActionDataChanged(oldval_actionData);
						}
						else
						{
							if(inWorld)
								onActionDataChanged(oldval_actionData);
						}

						break;
					case 40001:
						Vector3 oldval_direction = direction;
						direction = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onDirectionChanged(oldval_direction);
						}
						else
						{
							if(inWorld)
								onDirectionChanged(oldval_direction);
						}

						break;
					case 1:
						FRIENDS_LIST oldval_friendsList = friendsList;
						friendsList = ((DATATYPE_FRIENDS_LIST)EntityDef.id2datatypes[26]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onFriendsListChanged(oldval_friendsList);
						}
						else
						{
							if(inWorld)
								onFriendsListChanged(oldval_friendsList);
						}

						break;
					case 11:
						MJ_LIST oldval_holds = holds;
						holds = ((DATATYPE_MJ_LIST)EntityDef.id2datatypes[22]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onHoldsChanged(oldval_holds);
						}
						else
						{
							if(inWorld)
								onHoldsChanged(oldval_holds);
						}

						break;
					case 4:
						Byte oldval_inRoom = inRoom;
						inRoom = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onInRoomChanged(oldval_inRoom);
						}
						else
						{
							if(inWorld)
								onInRoomChanged(oldval_inRoom);
						}

						break;
					case 8:
						Byte oldval_isNewPlayer = isNewPlayer;
						isNewPlayer = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onIsNewPlayerChanged(oldval_isNewPlayer);
						}
						else
						{
							if(inWorld)
								onIsNewPlayerChanged(oldval_isNewPlayer);
						}

						break;
					case 10:
						Byte oldval_isReady = isReady;
						isReady = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onIsReadyChanged(oldval_isReady);
						}
						else
						{
							if(inWorld)
								onIsReadyChanged(oldval_isReady);
						}

						break;
					case 14:
						MAIL_LIST oldval_mailList = mailList;
						mailList = ((DATATYPE_MAIL_LIST)EntityDef.id2datatypes[25]).createFromStreamEx(stream);

						if(prop.isBase())
						{
							if(inited)
								onMailListChanged(oldval_mailList);
						}
						else
						{
							if(inWorld)
								onMailListChanged(oldval_mailList);
						}

						break;
					case 7:
						UInt32 oldval_playerGold = playerGold;
						playerGold = stream.readUint32();

						if(prop.isBase())
						{
							if(inited)
								onPlayerGoldChanged(oldval_playerGold);
						}
						else
						{
							if(inWorld)
								onPlayerGoldChanged(oldval_playerGold);
						}

						break;
					case 6:
						UInt16 oldval_playerID = playerID;
						playerID = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onPlayerIDChanged(oldval_playerID);
						}
						else
						{
							if(inWorld)
								onPlayerIDChanged(oldval_playerID);
						}

						break;
					case 3:
						UInt16 oldval_playerID_base = playerID_base;
						playerID_base = stream.readUint16();

						if(prop.isBase())
						{
							if(inited)
								onPlayerID_baseChanged(oldval_playerID_base);
						}
						else
						{
							if(inWorld)
								onPlayerID_baseChanged(oldval_playerID_base);
						}

						break;
					case 5:
						string oldval_playerName = playerName;
						playerName = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onPlayerNameChanged(oldval_playerName);
						}
						else
						{
							if(inWorld)
								onPlayerNameChanged(oldval_playerName);
						}

						break;
					case 2:
						string oldval_playerName_base = playerName_base;
						playerName_base = stream.readUnicode();

						if(prop.isBase())
						{
							if(inited)
								onPlayerName_baseChanged(oldval_playerName_base);
						}
						else
						{
							if(inWorld)
								onPlayerName_baseChanged(oldval_playerName_base);
						}

						break;
					case 40000:
						Vector3 oldval_position = position;
						position = stream.readVector3();

						if(prop.isBase())
						{
							if(inited)
								onPositionChanged(oldval_position);
						}
						else
						{
							if(inWorld)
								onPositionChanged(oldval_position);
						}

						break;
					case 9:
						Byte oldval_roomSeatIndex = roomSeatIndex;
						roomSeatIndex = stream.readUint8();

						if(prop.isBase())
						{
							if(inited)
								onRoomSeatIndexChanged(oldval_roomSeatIndex);
						}
						else
						{
							if(inWorld)
								onRoomSeatIndexChanged(oldval_roomSeatIndex);
						}

						break;
					case 40002:
						stream.readUint32();
						break;
					default:
						break;
				};
			}
		}

		public override void callPropertysSetMethods()
		{
			ScriptModule sm = EntityDef.moduledefs["Account"];
			Dictionary<UInt16, Property> pdatas = sm.idpropertys;

			TING_PAI_LIST oldval_TingPaiList = TingPaiList;
			Property prop_TingPaiList = pdatas[4];
			if(prop_TingPaiList.isBase())
			{
				if(inited && !inWorld)
					onTingPaiListChanged(oldval_TingPaiList);
			}
			else
			{
				if(inWorld)
				{
					if(prop_TingPaiList.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onTingPaiListChanged(oldval_TingPaiList);
					}
				}
			}

			Int32 oldval__lastmailID = _lastmailID;
			Property prop__lastmailID = pdatas[5];
			if(prop__lastmailID.isBase())
			{
				if(inited && !inWorld)
					on_lastmailIDChanged(oldval__lastmailID);
			}
			else
			{
				if(inWorld)
				{
					if(prop__lastmailID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						on_lastmailIDChanged(oldval__lastmailID);
					}
				}
			}

			PLAYER_ACTION_DIC oldval_actionData = actionData;
			Property prop_actionData = pdatas[6];
			if(prop_actionData.isBase())
			{
				if(inited && !inWorld)
					onActionDataChanged(oldval_actionData);
			}
			else
			{
				if(inWorld)
				{
					if(prop_actionData.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onActionDataChanged(oldval_actionData);
					}
				}
			}

			Vector3 oldval_direction = direction;
			Property prop_direction = pdatas[2];
			if(prop_direction.isBase())
			{
				if(inited && !inWorld)
					onDirectionChanged(oldval_direction);
			}
			else
			{
				if(inWorld)
				{
					if(prop_direction.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onDirectionChanged(oldval_direction);
					}
				}
			}

			FRIENDS_LIST oldval_friendsList = friendsList;
			Property prop_friendsList = pdatas[7];
			if(prop_friendsList.isBase())
			{
				if(inited && !inWorld)
					onFriendsListChanged(oldval_friendsList);
			}
			else
			{
				if(inWorld)
				{
					if(prop_friendsList.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onFriendsListChanged(oldval_friendsList);
					}
				}
			}

			MJ_LIST oldval_holds = holds;
			Property prop_holds = pdatas[8];
			if(prop_holds.isBase())
			{
				if(inited && !inWorld)
					onHoldsChanged(oldval_holds);
			}
			else
			{
				if(inWorld)
				{
					if(prop_holds.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onHoldsChanged(oldval_holds);
					}
				}
			}

			Byte oldval_inRoom = inRoom;
			Property prop_inRoom = pdatas[9];
			if(prop_inRoom.isBase())
			{
				if(inited && !inWorld)
					onInRoomChanged(oldval_inRoom);
			}
			else
			{
				if(inWorld)
				{
					if(prop_inRoom.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onInRoomChanged(oldval_inRoom);
					}
				}
			}

			Byte oldval_isNewPlayer = isNewPlayer;
			Property prop_isNewPlayer = pdatas[10];
			if(prop_isNewPlayer.isBase())
			{
				if(inited && !inWorld)
					onIsNewPlayerChanged(oldval_isNewPlayer);
			}
			else
			{
				if(inWorld)
				{
					if(prop_isNewPlayer.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onIsNewPlayerChanged(oldval_isNewPlayer);
					}
				}
			}

			Byte oldval_isReady = isReady;
			Property prop_isReady = pdatas[11];
			if(prop_isReady.isBase())
			{
				if(inited && !inWorld)
					onIsReadyChanged(oldval_isReady);
			}
			else
			{
				if(inWorld)
				{
					if(prop_isReady.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onIsReadyChanged(oldval_isReady);
					}
				}
			}

			MAIL_LIST oldval_mailList = mailList;
			Property prop_mailList = pdatas[12];
			if(prop_mailList.isBase())
			{
				if(inited && !inWorld)
					onMailListChanged(oldval_mailList);
			}
			else
			{
				if(inWorld)
				{
					if(prop_mailList.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onMailListChanged(oldval_mailList);
					}
				}
			}

			UInt32 oldval_playerGold = playerGold;
			Property prop_playerGold = pdatas[13];
			if(prop_playerGold.isBase())
			{
				if(inited && !inWorld)
					onPlayerGoldChanged(oldval_playerGold);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerGold.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerGoldChanged(oldval_playerGold);
					}
				}
			}

			UInt16 oldval_playerID = playerID;
			Property prop_playerID = pdatas[14];
			if(prop_playerID.isBase())
			{
				if(inited && !inWorld)
					onPlayerIDChanged(oldval_playerID);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerID.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerIDChanged(oldval_playerID);
					}
				}
			}

			UInt16 oldval_playerID_base = playerID_base;
			Property prop_playerID_base = pdatas[15];
			if(prop_playerID_base.isBase())
			{
				if(inited && !inWorld)
					onPlayerID_baseChanged(oldval_playerID_base);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerID_base.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerID_baseChanged(oldval_playerID_base);
					}
				}
			}

			string oldval_playerName = playerName;
			Property prop_playerName = pdatas[16];
			if(prop_playerName.isBase())
			{
				if(inited && !inWorld)
					onPlayerNameChanged(oldval_playerName);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerName.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerNameChanged(oldval_playerName);
					}
				}
			}

			string oldval_playerName_base = playerName_base;
			Property prop_playerName_base = pdatas[17];
			if(prop_playerName_base.isBase())
			{
				if(inited && !inWorld)
					onPlayerName_baseChanged(oldval_playerName_base);
			}
			else
			{
				if(inWorld)
				{
					if(prop_playerName_base.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPlayerName_baseChanged(oldval_playerName_base);
					}
				}
			}

			Vector3 oldval_position = position;
			Property prop_position = pdatas[1];
			if(prop_position.isBase())
			{
				if(inited && !inWorld)
					onPositionChanged(oldval_position);
			}
			else
			{
				if(inWorld)
				{
					if(prop_position.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onPositionChanged(oldval_position);
					}
				}
			}

			Byte oldval_roomSeatIndex = roomSeatIndex;
			Property prop_roomSeatIndex = pdatas[18];
			if(prop_roomSeatIndex.isBase())
			{
				if(inited && !inWorld)
					onRoomSeatIndexChanged(oldval_roomSeatIndex);
			}
			else
			{
				if(inWorld)
				{
					if(prop_roomSeatIndex.isOwnerOnly() && !isPlayer())
					{
					}
					else
					{
						onRoomSeatIndexChanged(oldval_roomSeatIndex);
					}
				}
			}

		}
	}
}